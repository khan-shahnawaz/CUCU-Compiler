Type: int
ID: main
LeftParen: (
Type: int
ID: argc
Comma: ,
Type: char **
ID: argv
RightParen: )
LeftCurlyBrace: {
Type: int
ID: i
EqualSign: =
Number: 2
PlusOP: +
Number: 3
Semicolon: ;
Type: char *
ID: s
Semicolon: ;
ID: func
LeftParen: (
ID: i
PlusOP: +
Number: 2
Comma: ,
ID: i
EqualityChecker: ==
Number: 2
PlusOP: +
Number: 2
Comma: ,
ID: s
LeftSquareBracket: [
ID: i
PlusOP: +
Number: 2
RightSquareBracket: ]
RightParen: )
Semicolon: ;
returnKeyword: return
ID: i
And: &
Number: 34
PlusOP: +
Number: 2
Semicolon: ;
Comment: /* A multiline 
  Comment 
  get it recognised */
ifKeyword: if
LeftParen: (
ID: a
EqualityChecker: ==
Number: 4
Logical Or: ||
ID: b
EqualityChecker: ==
LeftParen: (
Number: 3
PlusOP: +
Number: 5
PlusOP: +
Number: 1
RightParen: )
DivideOP: /
ID: ouc4
RightParen: )
LeftCurlyBrace: {
Type: int
ID: h
EqualSign: =
Number: 1
MultiplyOP: *
LeftParen: (
Number: 3
PlusOP: +
Number: 3
RightParen: )
Semicolon: ;
RightCurlyBrace: }
elseKeyword: else
ifKeyword: if
LeftParen: (
ID: a
EqualityChecker: ==
Number: 0
RightParen: )
LeftCurlyBrace: {
Type: char *
ID: i
EqualSign: =
Number: 0
Semicolon: ;
RightCurlyBrace: }
elseKeyword: else
LeftCurlyBrace: {
ID: printf
LeftParen: (
String: "fhasfhdas%d"
Comma: ,
ID: i
RightParen: )
Semicolon: ;
RightCurlyBrace: }
RightCurlyBrace: }
